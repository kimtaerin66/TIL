# 인터페이스

자바에서 인터페이스란?어떤 객체, 오브젝트에 대한 명제. 

어떤 역할을 하는 객체다 라고 설명하는 설명서.

[ 인터페이스 요소 ]

추상메서드 / 상수 / 디폴트 메서드 / 정적 메서드 / private 메서드

인터페이스와 클래스의 가장큰 차이는, 인터페이스는 추상메서드로만 이루어져있다.


## 인터페이스 사용하기

1. 선언 

 class가아닌 interface로 만들어준다.

```java
package interfaceex;

public interface Calc {
   
	 double PI = 3.14;
}
```

이렇게 코드를 작성하면 PI가 이탈릭체가 되는데,

상수는 이탈릭체로 표시하기때문. 또 상수는 컴파일과 상관없이 상수area 사용.


//에러선언

에러를 선언하는데, 에러는 int범위중 잘 사용하지 않을것같은 수로 선언한다.

```java
package interfaceex;

public interface Calc {
   
	 double PI = 3.14;
	 int ERROR = - 99999999;
	 
	 //사칙연산
	 int add(int num1, int num2);
	 int substract(int num1, int num2);
	 int times(int num1, int num2);
	 int divide(int num1, int num2);
	 
}

```

2. 1에서 정의한 interface를 가진 class를 생성해보자.

Calculator.java를 만들고 extends 대신 implements를 사용한다.

그러면 interface에서 정의한 메소드들이 오버라이드 되는데 그중 2개만 정의해보자.


```java

package interfaceex;

public class Calculator implements Calc{

	@Override
	public int add(int num1, int num2) {
		
		return num1 + num2;
	}

	@Override
	public int sub(int num1, int num2) {

		return num1 - num2;
	}
}

```

4개중 2개만 정의했기때문에 이 클래스는 추상클래스.

이 추상클래스를 상속받는 또 하나의 클래스 생성(CompleteCalc)

3. CompleteCalc.java 생성

Calculator를 상속받고, 상위클래스에서 정의하지않은 나머지 두개의 메소드를

정의한다.

```java
package interfaceex;

public class CompleteCalc extends Calculator{

	@Override
	public int times(int num1, int num2) {
		return num1 * num2;
	}

	@Override
	public int divide(int num1, int num2) {
		//분모는 0이면 안되므로
		if(num2 == 0)
			return ERROR;
		else
		   return num1 / num2;
	}
	
	public void showInfo() {
		System.out.println("모두 구현하였습니다.");
	}

}


```
4. 인스턴스 생성

new 키워드로 인스턴스를 생성할건데, 지금 이상태에서 new 할수있는 것은 CompleteCalc만 가능.

CompleteCalc만 완벽하게 다 구현이 되어있기때문.


```java

package interfaceex;

public class CalcTest {

	public static void main(String[] args) {
	
		
		CompleteCalc calc = new CompleteCalc();
		int n1 = 10;
		int n2 = 2;
		
		System.out.println(calc.add(n1, n2));
		System.out.println(calc.sub(n1, n2));
		System.out.println(calc.times(n1, n2));
		System.out.println(calc.divide(n1, n2));
		
        calc.showInfo();
	}

}
```

--------------------------------------------

# 인터페이스를 활용한 다형성 구현

서버와 클라이언트

서비스를 제공하는 쪽이 서버. 갖다쓰는쪽이 클라이언트

인터페이스를 가져다 쓸때에도, 해당.

특히 클라이언트에서 인터페이스를 가져다쓸때 그안에있는 코드를 전부보는것이아니라,

어떤값이 필요하고, 어떤값을 리턴하는구나 정도만 보고 사용하게 된다.

### 인터페이스와 다형성 구현 예제 

[문제]

고객센터에 전화 상담하는 상담원들이 있습니다. 일단 고객센터로 전화가 오면 대기열에 저장된다.

상담원이 지정되기전까지는 대기상태이고, 각 전화가 상담원에게 배분되는 정책은 다음과같이 여러방식이다.

- 상담원 순서대로 배분하기
- 대기가 짧은 상담원 먼저 배분하기
- 우선순위가 높은 상담원에게 먼저 배분하기

위와 같이 다양한 정책이 사용되는 경우 interface를 정의하고, 다양한 정책을 구현하여 실행하세요.


1. interface 만들기

interface = 해야할일들 정의

```java
package scheduler;

public interface Scheduler {
	
	   public void getNextCall();
	   public void sendCallToAgent();
}

```

2. 방식갯수만큼 class생성
RoundRobin / PriorityAllocation / LeastJob 
```java
//RoundRobin
package scheduler;

public class implements Scheduler {

	@Override
	public void getNextCall() {
	   System.out.println("상담 전화를 순서대로 대기열에서 가져옵니다.");
		
	}

	@Override
	public void sendCallToAgent() {
		 System.out.println("다음 순서의 상담원에게 배분합니다.");
		
	}

}


//PriorityAllocation
package scheduler;

public class PriorityAllocation implements Scheduler{

	@Override
	public void getNextCall() {
		System.out.println("고객등급이 높은 고객의 call을 먼저 가져옵니다.");
		
	}

	@Override
	public void sendCallToAgent() {
		System.out.println("업무 숙련도가 높은 상담원에게 먼저 배분합니다.");
		
	}

}

//LeastJob

package scheduler;

public class LeastJob implements Scheduler{

	@Override
	public void getNextCall() {
		System.out.println("상담 전화를 순서대로 대기열에서 가져옵니다.");
		
	}

	@Override
	public void sendCallToAgent() {
		System.out.println("현재 상담업무가 없거나 상담대기가 가장 적은 상담원에게 할당합니다.");
		
	}

}


```

3. test 파일 생성
```java
package scheduler;

import java.io.IOException;

public class SchedulerTest {

	public static void main(String[] args) throws IOException {

		   System.out.println("전화 상담원 할당 방식을 선택하세요.");
		   System.out.println("R : 한명씩 차례대로");
		   System.out.println("L : 대기가 적은 상담원 우선");
		   System.out.println("P : 우선순위가 높은 고객우선 숙련도 높은 상담원");
		   
		   int ch = System.in.read(); //프로그램을 읽어들임
		   
		   //방식들이 전부 스케줄러 타입이니 스케줄러로 선언
		   Scheduler scheduler = null;
		   
		   if( ch == 'R' || ch == 'r' ) {
			   scheduler = new RoundRobin();
		   }
		   else if(ch == 'L' || ch == 'l') {
			   scheduler = new LeastJob();
		   }  else if(ch == 'P' || ch == 'p') {
			   scheduler = new PriorityAllocation();
		   }else {
			System.out.println("지원되지 않는 기능입니다.");   
			return;
		   }
		   
		   scheduler.getNextCall();
		   scheduler.sendCallToAgent();
	}

}

```








