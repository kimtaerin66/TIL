{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rin\\\\Desktop\\\\\\uAE40\\uD0DC\\uB9B0\\\\TIL\\\\TIL\\\\Clone_coding\\\\movie_master\\\\src\\\\routes\\\\Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\nimport ApexChart from \"react-apexcharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Chart(_ref) {\n  _s();\n\n  var _data$map, _data$map2;\n\n  let {\n    coinId\n  } = _ref;\n  const {\n    isLoading,\n    data\n  } = useQuery([\"ohlcv\", coinId], () => fetchCoinHistory(coinId));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoading ? \"Loading chart...\" : /*#__PURE__*/_jsxDEV(ApexChart, {\n      type: \"line\",\n      series: [{\n        name: \"Price\",\n        data: (_data$map = data === null || data === void 0 ? void 0 : data.map(price => price.close)) !== null && _data$map !== void 0 ? _data$map : [] //없으면 빈배열추가.\n\n      }],\n      options: {\n        theme: {\n          mode: \"dark\"\n        },\n        chart: {\n          width: 500,\n          height: 300,\n          toolbar: {\n            show: false\n          },\n          background: \"transparent\"\n        },\n        grid: {\n          show: false\n        },\n        stroke: {\n          curve: \"smooth\",\n          width: 3\n        },\n        yaxis: {\n          show: false\n        },\n        xaxis: {\n          axisBorder: {\n            show: false\n          },\n          axisTicks: {\n            show: false\n          },\n          labels: {\n            show: false\n          },\n          type: \"datetime\",\n          categories: (_data$map2 = data === null || data === void 0 ? void 0 : data.map(data => data.time_close)) !== null && _data$map2 !== void 0 ? _data$map2 : []\n        },\n        fill: {\n          type: \"gradient\",\n          gradient: {\n            gradientToColors: [\"blue\"],\n            stops: [0, 100]\n          }\n        },\n        colors: [\"red\"],\n        tooltip: {\n          y: {\n            formatter: value => `$${value.toFixed(3)}`\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Chart, \"3/UYpjJNObciauUid8uIQ//UcYY=\", false, function () {\n  return [useQuery];\n});\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["C:/Users/rin/Desktop/김태린/TIL/TIL/Clone_coding/movie_master/src/routes/Chart.tsx"],"names":["React","useQuery","fetchCoinHistory","ApexChart","Chart","coinId","isLoading","data","name","map","price","close","theme","mode","chart","width","height","toolbar","show","background","grid","stroke","curve","yaxis","xaxis","axisBorder","axisTicks","labels","type","categories","time_close","fill","gradient","gradientToColors","stops","colors","tooltip","y","formatter","value","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,gBAAT,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAiBA,SAASC,KAAT,OAAuC;AAAA;;AAAA;;AAAA,MAAxB;AAAEC,IAAAA;AAAF,GAAwB;AACrC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAsBN,QAAQ,CAClC,CAAC,OAAD,EAAUI,MAAV,CADkC,EAElC,MAAMH,gBAAgB,CAACG,MAAD,CAFY,CAApC;AAIA,sBACE;AAAA,cACGC,SAAS,GACR,kBADQ,gBAGR,QAAC,SAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,MAAM,EAAE,CACN;AACEE,QAAAA,IAAI,EAAE,OADR;AAEED,QAAAA,IAAI,eAAEA,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAWC,KAAD,IAAWA,KAAK,CAACC,KAA3B,CAAF,iDAAuC,EAF7C,CAEiD;;AAFjD,OADM,CAFV;AAQE,MAAA,OAAO,EAAE;AACPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,IAAI,EAAE;AADD,SADA;AAIPC,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE,GADF;AAELC,UAAAA,MAAM,EAAE,GAFH;AAGLC,UAAAA,OAAO,EAAE;AACPC,YAAAA,IAAI,EAAE;AADC,WAHJ;AAMLC,UAAAA,UAAU,EAAE;AANP,SAJA;AAYPC,QAAAA,IAAI,EAAE;AACJF,UAAAA,IAAI,EAAE;AADF,SAZC;AAePG,QAAAA,MAAM,EAAE;AACNC,UAAAA,KAAK,EAAE,QADD;AAENP,UAAAA,KAAK,EAAE;AAFD,SAfD;AAmBPQ,QAAAA,KAAK,EAAE;AACLL,UAAAA,IAAI,EAAE;AADD,SAnBA;AAsBPM,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AAAEP,YAAAA,IAAI,EAAE;AAAR,WADP;AAELQ,UAAAA,SAAS,EAAE;AAAER,YAAAA,IAAI,EAAE;AAAR,WAFN;AAGLS,UAAAA,MAAM,EAAE;AAAET,YAAAA,IAAI,EAAE;AAAR,WAHH;AAILU,UAAAA,IAAI,EAAE,UAJD;AAKLC,UAAAA,UAAU,gBAAEtB,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEE,GAAN,CAAUF,IAAI,IAAGA,IAAI,CAACuB,UAAtB,CAAF,mDAAuC;AAL5C,SAtBA;AA6BPC,QAAAA,IAAI,EAAE;AACJH,UAAAA,IAAI,EAAE,UADF;AAEJI,UAAAA,QAAQ,EAAE;AAAEC,YAAAA,gBAAgB,EAAE,CAAC,MAAD,CAApB;AAA8BC,YAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,GAAJ;AAArC;AAFN,SA7BC;AAiCPC,QAAAA,MAAM,EAAE,CAAC,KAAD,CAjCD;AAkCPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,CAAC,EAAE;AACDC,YAAAA,SAAS,EAAGC,KAAD,IAAY,IAAGA,KAAK,CAACC,OAAN,CAAc,CAAd,CAAiB;AAD1C;AADI;AAlCF;AARX;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AAyDD;;GA9DQpC,K;UACqBH,Q;;;KADrBG,K;AAgET,eAAeA,KAAf","sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { fetchCoinHistory } from \"../api\";\r\nimport ApexChart from \"react-apexcharts\";\r\n\r\ninterface IHistoricalData {\r\n  time_open: string;\r\n  time_close: string;\r\n  open: number;\r\n  high: number;\r\n  low: number;\r\n  close: number;\r\n  volume: number;\r\n  market_cap: number;\r\n}\r\n\r\ninterface ChartProps {\r\n  coinId: string;\r\n}\r\n\r\nfunction Chart({ coinId }: ChartProps) {\r\n  const { isLoading, data } = useQuery<IHistoricalData[]>(\r\n    [\"ohlcv\", coinId],\r\n    () => fetchCoinHistory(coinId)\r\n  );\r\n  return (\r\n    <div>\r\n      {isLoading ? (\r\n        \"Loading chart...\"\r\n      ) : (\r\n        <ApexChart\r\n          type=\"line\"\r\n          series={[\r\n            {\r\n              name: \"Price\",\r\n              data: data?.map((price) => price.close) ?? [], //없으면 빈배열추가.\r\n            },\r\n          ]}\r\n          options={{\r\n            theme: {\r\n              mode: \"dark\",\r\n            },\r\n            chart: {\r\n              width: 500,\r\n              height: 300,\r\n              toolbar: {\r\n                show: false,\r\n              },\r\n              background: \"transparent\",\r\n            },\r\n            grid: {\r\n              show: false,\r\n            },\r\n            stroke: {\r\n              curve: \"smooth\",\r\n              width: 3,\r\n            },\r\n            yaxis: {\r\n              show: false,\r\n            },\r\n            xaxis: {\r\n              axisBorder: { show: false },\r\n              axisTicks: { show: false },\r\n              labels: { show: false },\r\n              type: \"datetime\",\r\n              categories: data?.map(data=> data.time_close) ?? []\r\n            },\r\n            fill: {\r\n              type: \"gradient\",\r\n              gradient: { gradientToColors: [\"blue\"], stops: [0, 100] },\r\n            },\r\n            colors: [\"red\"],\r\n            tooltip: {\r\n              y: {\r\n                formatter: (value) => `$${value.toFixed(3)}`,\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n"]},"metadata":{},"sourceType":"module"}