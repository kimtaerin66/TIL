{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rin\\\\TIL\\\\TIL\\\\TIL\\\\Clone_coding\\\\movie_master\\\\src\\\\components\\\\ToDoList.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList() {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setValue\n  } = useForm();\n\n  const handleVaild = data => {\n    console.log('add to do', data.toDo);\n    setValue(\"toDo\", \"\"); //data가 유효하다면 출력 후 비우기\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"To Dos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(handleVaild),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...register(\"toDo\", {\n          required: \"Please write a To Do\"\n        }),\n        placeholder: \"Write a to do\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n} // function ToDoList() {\n//   const {\n//     register,\n//     handleSubmit,\n//     formState: { errors },\n//     setError,\n//   } = useForm<IForm>({\n//     defaultValues: {\n//       email: \"@naver.com\",\n//     },\n//   }); //데이터가 유효하지않으면 useForm이 에러를 보여줌\n//   const onVaild = (data: IForm) => {\n//     if (data.password !== data.password1) {\n//       //같지않으면\n//       setError(\n//         \"password1\",\n//         { message: \"Password are not the same\" },\n//         { shouldFocus: true }\n//       ); //메세지보내기\n//     }\n//     setError(\"extraError\", { message: \"Server offline.\" });\n//   };\n//   console.log(errors);\n//   return (\n//     <div>\n//       <form\n//         style={{ display: \"flex\", flexDirection: \"column\" }}\n//         onSubmit={handleSubmit(onVaild)}\n//       >\n//         <input\n//           {...register(\"email\", {\n//             required: \"email is required\",\n//             pattern: {\n//               value: /^[A-Za-z0-9._%+-]+@naver.com$/,\n//               message: \"only naver.com emails allowed\",\n//             },\n//           })}\n//           placeholder=\"email\"\n//         />\n//         <span> {errors?.email?.message}</span>\n//         <input\n//           {...register(\"firstname\", {\n//             required: \"write here\",\n//             // validate: (value) => true, 불린값사용가능\n//             validate: {\n//               noRin: (value) =>\n//                 value.includes(\"rin\") ? \"no rin allowed\" : true, //특정값 포함여부 확인시\n//               noBok: (value) =>\n//                 value.includes(\"bok\") ? \"no rin allowed\" : true, //특정값 포함여부 확인시\n//             },\n//           })}\n//           placeholder=\"firstname\"\n//         />\n//         <span> {errors?.firstname?.message}</span>\n//         <input\n//           {...register(\"lastname\", { required: \"write here\" })}\n//           placeholder=\"lastname\"\n//         />\n//         <span> {errors?.lastname?.message}</span>\n//         <input\n//           {...register(\"username\", { required: \"write here\", minLength: 10 })}\n//           placeholder=\"username\"\n//         />\n//         <span> {errors?.username?.message}</span>\n//         <input\n//           {...register(\"password\", {\n//             required: \"write here\",\n//             minLength: 5,\n//             maxLength: 10,\n//           })}\n//           placeholder=\"password\"\n//         />\n//         <span> {errors?.password?.message}</span>\n//         <input\n//           {...register(\"password1\", {\n//             required: \"password is required\",\n//             minLength: {\n//               value: 5,\n//               message: \"your password is too short.\",\n//             },\n//           })}\n//           placeholder=\"password1\"\n//         />\n//         <span> {errors?.password1?.message}</span>\n//         <button>Add</button>\n//       </form>\n//       <span>{errors?.extraError?.message}</span>\n//     </div>\n//   );\n// }\n\n\n_s(ToDoList, \"fo0xdcgv9LMkoBi1FjPOuaEkfSc=\", false, function () {\n  return [useForm];\n});\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["C:/Users/rin/TIL/TIL/TIL/Clone_coding/movie_master/src/components/ToDoList.tsx"],"names":["React","useForm","ToDoList","register","handleSubmit","setValue","handleVaild","data","console","log","toDo","required"],"mappings":";;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;;;AAMA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,YAAZ;AAA0BC,IAAAA;AAA1B,MAAuCJ,OAAO,EAApD;;AACA,QAAMK,WAAW,GAAIC,IAAD,IAAgB;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,IAAI,CAACG,IAA9B;AACAL,IAAAA,QAAQ,CAAC,MAAD,EAAS,EAAT,CAAR,CAFgC,CAEV;AACzB,GAHD;;AAIF,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAED,YAAY,CAACE,WAAD,CAA5B;AAAA,8BACE,sBAAWH,QAAQ,CAAC,MAAD,EAAQ;AACvBQ,UAAAA,QAAQ,EAAC;AADc,SAAR,CAAnB;AAGA,QAAA,WAAW,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA/GST,Q;UACwCD,O;;;KADxCC,Q;AAiHT,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\ninterface IForm {\r\n    toDo:string;\r\n}\r\n\r\nfunction ToDoList() {\r\n    const { register, handleSubmit, setValue } = useForm<IForm>();\r\n    const handleVaild = (data:IForm) => {\r\n        console.log('add to do', data.toDo);\r\n        setValue(\"toDo\", \"\"); //data가 유효하다면 출력 후 비우기\r\n    }\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <form onSubmit={handleSubmit(handleVaild)}>\r\n        <input {...register(\"toDo\",{\r\n            required:\"Please write a To Do\",\r\n        })} \r\n        placeholder=\"Write a to do\" />\r\n        <button>Add</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n// function ToDoList() {\r\n//   const {\r\n//     register,\r\n//     handleSubmit,\r\n//     formState: { errors },\r\n//     setError,\r\n//   } = useForm<IForm>({\r\n//     defaultValues: {\r\n//       email: \"@naver.com\",\r\n//     },\r\n//   }); //데이터가 유효하지않으면 useForm이 에러를 보여줌\r\n//   const onVaild = (data: IForm) => {\r\n//     if (data.password !== data.password1) {\r\n//       //같지않으면\r\n//       setError(\r\n//         \"password1\",\r\n//         { message: \"Password are not the same\" },\r\n//         { shouldFocus: true }\r\n//       ); //메세지보내기\r\n//     }\r\n//     setError(\"extraError\", { message: \"Server offline.\" });\r\n//   };\r\n//   console.log(errors);\r\n//   return (\r\n//     <div>\r\n//       <form\r\n//         style={{ display: \"flex\", flexDirection: \"column\" }}\r\n//         onSubmit={handleSubmit(onVaild)}\r\n//       >\r\n//         <input\r\n//           {...register(\"email\", {\r\n//             required: \"email is required\",\r\n//             pattern: {\r\n//               value: /^[A-Za-z0-9._%+-]+@naver.com$/,\r\n//               message: \"only naver.com emails allowed\",\r\n//             },\r\n//           })}\r\n//           placeholder=\"email\"\r\n//         />\r\n//         <span> {errors?.email?.message}</span>\r\n//         <input\r\n//           {...register(\"firstname\", {\r\n//             required: \"write here\",\r\n//             // validate: (value) => true, 불린값사용가능\r\n//             validate: {\r\n//               noRin: (value) =>\r\n//                 value.includes(\"rin\") ? \"no rin allowed\" : true, //특정값 포함여부 확인시\r\n//               noBok: (value) =>\r\n//                 value.includes(\"bok\") ? \"no rin allowed\" : true, //특정값 포함여부 확인시\r\n//             },\r\n//           })}\r\n//           placeholder=\"firstname\"\r\n//         />\r\n//         <span> {errors?.firstname?.message}</span>\r\n//         <input\r\n//           {...register(\"lastname\", { required: \"write here\" })}\r\n//           placeholder=\"lastname\"\r\n//         />\r\n//         <span> {errors?.lastname?.message}</span>\r\n//         <input\r\n//           {...register(\"username\", { required: \"write here\", minLength: 10 })}\r\n//           placeholder=\"username\"\r\n//         />\r\n//         <span> {errors?.username?.message}</span>\r\n//         <input\r\n//           {...register(\"password\", {\r\n//             required: \"write here\",\r\n//             minLength: 5,\r\n//             maxLength: 10,\r\n//           })}\r\n//           placeholder=\"password\"\r\n//         />\r\n//         <span> {errors?.password?.message}</span>\r\n//         <input\r\n//           {...register(\"password1\", {\r\n//             required: \"password is required\",\r\n//             minLength: {\r\n//               value: 5,\r\n//               message: \"your password is too short.\",\r\n//             },\r\n//           })}\r\n//           placeholder=\"password1\"\r\n//         />\r\n//         <span> {errors?.password1?.message}</span>\r\n//         <button>Add</button>\r\n//       </form>\r\n//       <span>{errors?.extraError?.message}</span>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default ToDoList;\r\n"]},"metadata":{},"sourceType":"module"}