{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rin\\\\TIL\\\\TIL\\\\TIL\\\\Clone_coding\\\\movie_master\\\\src\\\\components\\\\ToDo.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSetRecoilState } from 'recoil';\nimport { toDoState } from \"./atoms\"; // function ToDo({ text, category }: IToDo) {\n//atom에서 받아와서 체크\n//   const onClick = (newCategory : IToDo[\"category\"]) => {\n//     console.log(\"o wanna go to\", newCategory)\n//   }\n//   return (\n//     <li>\n//       <span> {text} </span>\n//       {category !== \"DOING\" && <button onClick={()=> onClick(\"DOING\")}>Doing</button>}\n//       {category !== \"TO_DO\" && <button onClick={()=> onClick(\"TO_DO\")}>To Do</button>}\n//       {category !== \"DONE\" && <button onClick={()=> onClick(\"DONE\")}>Done</button>}\n//     </li>\n//   );\n// }\n// //유저가 클릭한 카테고리를 인식하여 변경되게 onClick 함수만들기\n// export default ToDo;\n//name을 이용한 방법\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDo(_ref) {\n  _s();\n\n  let {\n    text,\n    category,\n    id\n  } = _ref;\n  const setToDos = useSetRecoilState(toDoState); //atom수정\n\n  const onClick = event => {\n    // console.log(event?.currentTarget.name)\n    const {\n      currentTarget: {\n        name\n      }\n    } = event;\n    setToDos(oldToDos => {\n      //타켓의 경로알기 함수형프로그래밍 배열에서 인덱스찾기\n      //todo배열의 id와 props의 id를 비교한다\n      const targetIndex = oldToDos.findIndex(toDo => toDo.id === id);\n      const oldToDo = oldToDos[targetIndex];\n      const newToDo = {\n        text,\n        id,\n        category: name\n      }; //newtodo는 오브젝트로, 받아온 prop text사용\n      //카테고리는 클릭된 버튼의 카테고리 받아와야해서 name\n\n      console.log(oldToDo, newToDo);\n      return oldToDos;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), category !== \"DOING\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"DOING\",\n      onClick: onClick,\n      children: \"Doing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), category !== \"TO_DO\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"TO_DO\",\n      onClick: onClick,\n      children: \"To Do\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), category !== \"DONE\" && /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"DONE\",\n      onClick: onClick,\n      children: \"Done\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n} //유저가 클릭한 카테고리를 인식하여 변경되게 onClick 함수만들기\n\n\n_s(ToDo, \"BR93yBPF8CYIHT/jsK8zidf9OVI=\", false, function () {\n  return [useSetRecoilState];\n});\n\n_c = ToDo;\nexport default ToDo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"sources":["C:/Users/rin/TIL/TIL/TIL/Clone_coding/movie_master/src/components/ToDo.tsx"],"names":["React","useSetRecoilState","toDoState","ToDo","text","category","id","setToDos","onClick","event","currentTarget","name","oldToDos","targetIndex","findIndex","toDo","oldToDo","newToDo","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,iBAAT,QAAkC,QAAlC;AACA,SAAQC,SAAR,QAAyB,SAAzB,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA,SAASC,IAAT,OAA6C;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAA+B;AAC3C,QAAMC,QAAQ,GAAGN,iBAAiB,CAACC,SAAD,CAAlC,CAD2C,CACG;;AAC9C,QAAMM,OAAO,GAAIC,KAAD,IAAgD;AAC9D;AACA,UAAM;AACJC,MAAAA,aAAa,EAAE;AAAEC,QAAAA;AAAF;AADX,QAEFF,KAFJ;AAGAF,IAAAA,QAAQ,CAAEK,QAAD,IAAc;AACrB;AACA;AACA,YAAMC,WAAW,GAAGD,QAAQ,CAACE,SAAT,CAAmBC,IAAI,IAAIA,IAAI,CAACT,EAAL,KAAYA,EAAvC,CAApB;AACD,YAAMU,OAAO,GAAGJ,QAAQ,CAACC,WAAD,CAAxB;AACA,YAAMI,OAAO,GAAG;AAACb,QAAAA,IAAD;AAAOE,QAAAA,EAAP;AAAWD,QAAAA,QAAQ,EAACM;AAApB,OAAhB,CALsB,CAKoB;AAC3C;;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBC,OAArB;AACE,aAAOL,QAAP;AACD,KATO,CAAR;AAUD,GAfD;;AAgBA,sBACE;AAAA,4BACE;AAAA,sBAAQR,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGC,QAAQ,KAAK,OAAb,iBACC;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,OAAO,EAAEG,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAOGH,QAAQ,KAAK,OAAb,iBACC;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,OAAO,EAAEG,OAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ,EAYGH,QAAQ,KAAK,MAAb,iBACC;AAAQ,MAAA,IAAI,EAAC,MAAb;AAAoB,MAAA,OAAO,EAAEG,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,C,CACD;;;GAvCSL,I;UACUF,iB;;;KADVE,I;AAwCT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\nimport { IToDo } from \"./atoms\";\r\nimport { useSetRecoilState } from 'recoil';\r\nimport {toDoState } from \"./atoms\";\r\n\r\n// function ToDo({ text, category }: IToDo) {\r\n//atom에서 받아와서 체크\r\n//   const onClick = (newCategory : IToDo[\"category\"]) => {\r\n//     console.log(\"o wanna go to\", newCategory)\r\n\r\n//   }\r\n//   return (\r\n//     <li>\r\n//       <span> {text} </span>\r\n//       {category !== \"DOING\" && <button onClick={()=> onClick(\"DOING\")}>Doing</button>}\r\n//       {category !== \"TO_DO\" && <button onClick={()=> onClick(\"TO_DO\")}>To Do</button>}\r\n//       {category !== \"DONE\" && <button onClick={()=> onClick(\"DONE\")}>Done</button>}\r\n//     </li>\r\n//   );\r\n// }\r\n// //유저가 클릭한 카테고리를 인식하여 변경되게 onClick 함수만들기\r\n// export default ToDo;\r\n\r\n//name을 이용한 방법\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState) //atom수정\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    // console.log(event?.currentTarget.name)\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      //타켓의 경로알기 함수형프로그래밍 배열에서 인덱스찾기\r\n      //todo배열의 id와 props의 id를 비교한다\r\n      const targetIndex = oldToDos.findIndex(toDo => toDo.id === id)\r\n     const oldToDo = oldToDos[targetIndex];\r\n     const newToDo = {text, id, category:name }//newtodo는 오브젝트로, 받아온 prop text사용\r\n    //카테고리는 클릭된 버튼의 카테고리 받아와야해서 name\r\n    console.log(oldToDo, newToDo)\r\n      return oldToDos;\r\n    })\r\n  };\r\n  return (\r\n    <li>\r\n      <span> {text} </span>\r\n      {category !== \"DOING\" && (\r\n        <button name=\"DOING\" onClick={onClick}>\r\n          Doing\r\n        </button>\r\n      )}\r\n      {category !== \"TO_DO\" && (\r\n        <button name=\"TO_DO\" onClick={onClick}>\r\n          To Do\r\n        </button>\r\n      )}\r\n      {category !== \"DONE\" && (\r\n        <button name=\"DONE\" onClick={onClick}>\r\n          Done\r\n        </button>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n//유저가 클릭한 카테고리를 인식하여 변경되게 onClick 함수만들기\r\nexport default ToDo;\r\n"]},"metadata":{},"sourceType":"module"}